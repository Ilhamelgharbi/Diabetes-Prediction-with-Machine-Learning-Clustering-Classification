
import streamlit as st
import pandas as pd
import numpy as np
import joblib
from sklearn.preprocessing import StandardScaler
import os

# --- Chargement du mod√®le et scaler sauvegard√©s ---
model = joblib.load("models/model.pkl")

scaler_path = "models/scaler.pkl"
if os.path.exists(scaler_path):
    scaler = joblib.load(scaler_path)
    scaler_loaded = True
    st.sidebar.success("‚úÖ Scaler charg√© depuis scaler.pkl")
else:
    scaler = None
    scaler_loaded = False
    st.sidebar.error("‚ùå Scaler non trouv√© ! Veuillez placer 'scaler.pkl' dans le dossier models.")
    st.sidebar.info("Dans votre notebook d'entra√Ænement, ajoutez : joblib.dump(scaler, '../models/scaler.pkl') juste apr√®s l'entra√Ænement du scaler.")

# --- Titre ---
st.title("ü©∫ Pr√©diction du Risque de Diab√®te")

st.markdown("""
Ce simulateur pr√©dit si une personne appartient √† un **groupe √† risque √©lev√©** ou **faible** de diab√®te, 
en se basant sur les caract√©ristiques de sant√© renseign√©es ci-dessous.

**Mod√®le utilis√© :** Classification supervis√©e optimis√©e avec GridSearchCV
""")

# --- Informations sur le mod√®le ---
with st.expander("‚ÑπÔ∏è Informations sur le mod√®le"):
    st.write("""
    - **Type de mod√®le :** Mod√®le de classification optimis√©
    - **Variables d'entr√©e :** 4 caract√©ristiques de sant√©
    - **Features utilis√©es :** Glucose, BMI, Age, DiabetesPedigreeFunction
    - **Sortie :** Probabilit√© de risque de diab√®te (0 = Faible, 1 = √âlev√©)
    - **Pr√©processing :** Standardisation avec StandardScaler
    """)

# --- Formulaire utilisateur ---
st.header("üìã Entrez les donn√©es de la personne :")

st.info("‚ÑπÔ∏è Ce mod√®le utilise 4 caract√©ristiques principales pour la pr√©diction")

col1, col2 = st.columns(2)

with col1:
    st.subheader("üî¨ Donn√©es m√©dicales")
    glucose = st.slider("Taux de Glucose (mg/dL)", 0, 200, 100, help="Concentration de glucose dans le sang")
    bmi = st.slider("Indice de Masse Corporelle (BMI)", 10.0, 60.0, 25.0, help="BMI = poids(kg) / taille(m)¬≤")

with col2:
    st.subheader("üë§ Donn√©es personnelles")
    age = st.slider("√Çge (ann√©es)", 10, 100, 35, help="√Çge de la personne")
    dpf = st.slider("Fonction g√©n√©tique (DPF)", 0.0, 2.5, 0.5, help="Diabetes Pedigree Function - pr√©disposition g√©n√©tique")

# --- Pr√©diction ---
st.header("üîç Pr√©diction du Risque")

if st.button("üîç Pr√©dire le risque", type="primary"):
    # V√©rification de la pr√©sence du scaler
    if not scaler_loaded or scaler is None:
        st.error("‚ùå Impossible de pr√©dire : le scaler pr√©-entra√Æn√© est requis.")
        st.info("Veuillez placer le fichier 'scaler.pkl' dans le dossier models pour garantir la coh√©rence des pr√©dictions.")
    else:
        # Cr√©ation du DataFrame avec les donn√©es d'entr√©e (ordre des features doit correspondre √† l'entra√Ænement)
        input_data = pd.DataFrame([[glucose, bmi, age, dpf]], columns=['Glucose', 'BMI', 'Age', 'DiabetesPedigreeFunction'])

        # Affichage des donn√©es saisies
        with st.expander("üìä Donn√©es saisies"):
            st.dataframe(input_data)

        try:
            # Standardisation des donn√©es
            input_data_scaled = scaler.transform(input_data)
            st.success("‚úÖ Donn√©es standardis√©es avec le scaler pr√©-entra√Æn√©")

            # V√©rification de la forme d'entr√©e pour le mod√®le
            if input_data_scaled.shape[1] != model.n_features_in_:
                st.error(f"‚ùå Le mod√®le attend {model.n_features_in_} features, mais {input_data_scaled.shape[1]} ont √©t√© fournis.")
                st.info("V√©rifiez l'ordre et le nombre de variables d'entr√©e.")
            else:
                # Pr√©diction
                prediction = model.predict(input_data_scaled)
                prob = model.predict_proba(input_data_scaled)[0]

                # Affichage des r√©sultats
                st.markdown("---")
                col1, col2, col3 = st.columns([1, 2, 1])
                with col2:
                    if prediction[0] == 1:
                        st.error(f"‚ö†Ô∏è **RISQUE √âLEV√â de diab√®te**")
                        st.error(f"Probabilit√© : **{prob[1]:.2%}**")
                        st.markdown("""
                        **Recommandations :**
                        - Consultez un professionnel de sant√©
                        - Surveillez votre alimentation
                        - Pratiquez une activit√© physique r√©guli√®re
                        """)
                    else:
                        st.success(f"‚úÖ **RISQUE FAIBLE de diab√®te**")
                        st.success(f"Probabilit√© de non-diab√®te : **{prob[0]:.2%}**")
                        st.markdown("""
                        **Conseils de pr√©vention :**
                        - Maintenez un mode de vie sain
                        - Contr√¥les m√©dicaux r√©guliers
                        - Alimentation √©quilibr√©e
                        """)

                # D√©tails des probabilit√©s
                st.markdown("---")
                st.subheader("üìà D√©tail des probabilit√©s")
                col1, col2 = st.columns(2)
                with col1:
                    st.metric("Probabilit√© Risque Faible", f"{prob[0]:.2%}")
                with col2:
                    st.metric("Probabilit√© Risque √âlev√©", f"{prob[1]:.2%}")
        except Exception as e:
            st.error(f"‚ùå Erreur lors de la pr√©diction : {str(e)}")
            st.info("V√©rifiez que le mod√®le et le scaler sont compatibles avec les donn√©es d'entr√©e.\nSi le probl√®me persiste, assurez-vous d'avoir sauvegard√© le scaler avec joblib.dump(scaler, 'models/scaler.pkl') dans votre notebook d'entra√Ænement.")
